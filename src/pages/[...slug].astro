---
import gql from "graphql-tag";
import ArtworksBlock, {
  fragment as ArtworksBlockFragment,
} from "../components/blocks/artworks-block.astro";
import LatestArtworksBlock, {
  fragment as LatestArtworksBlockFragment,
} from "../components/blocks/latest-artworks-block.astro";
import LatestPostsBlock, {
  fragment as LatestPostsBlockFragment,
} from "../components/blocks/latest-posts-block.astro";
import PostsBlock, {
  fragment as PostsBlockFragment,
} from "../components/blocks/posts-block.astro";
import { Header } from "../components/header";
import Layout from "../layouts/layout.astro";
import { request } from "../lib/datocms/request";
import type {
  ArtworkRecord,
  GlobalRecord,
  PageRecord,
  PostRecord,
  Site,
} from "../lib/datocms/types";
import { metaTagFragment, responsiveImageFragment } from "../lib/fragments";

export async function getStaticPaths() {
  const {
    allPages: pages,
    global: { postsPage, artworksPage },
    allPosts: posts,
    allArtworks: artworks,
  } = await request<{
    allPages: PageRecord[];
    global: GlobalRecord;
    allPosts: PostRecord[];
    allArtworks: ArtworkRecord[];
  }>(gql`
    {
      allPages(first: 20) {
        slug
      }
      allPosts(first: 20) {
        slug
      }
      allArtworks(first: 20) {
        slug
      }
      global {
        postsPage {
          slug
        }
        artworksPage {
          slug
        }
      }
    }
  `);
  const pagePaths = pages.map((page) => ({
    params: { slug: page.slug || undefined },
  }));
  const postPaths = posts.map((post) => ({
    params: { slug: `${postsPage.slug}/${post.slug}` || undefined },
  }));
  const artworkPaths = artworks.map((artwork) => ({
    params: { slug: `${artworksPage.slug}/${artwork.slug}` || undefined },
  }));
  return [...pagePaths, ...postPaths, ...artworkPaths];
}

const { slug = "" } = Astro.params;

const query = gql`
  query PageBySlug($slug: String) {
    page(filter: { slug: { eq: $slug } }) {
      id
      title
      slug
      blocks {
        __typename
        ... on LatestPostsBlockRecord {
          ...LatestPostsBlock
        }
        ... on LatestArtworksBlockRecord {
          ...LatestArtworksBlock
        }
        ... on PostsBlockRecord {
          ...PostsBlock
        }
        ... on ArtworksBlockRecord {
          ...ArtworksBlock
        }
      }
      _seoMetaTags {
        ...MetaTag
      }
    }
    site: _site {
      faviconMetaTags {
        ...MetaTag
      }
    }
    global {
      logo {
        responsiveImage(imgixParams: { fit: crop, w: 2000, h: 1000 }) {
          ...ResponsiveImage
        }
      }
    }
  }

  ${metaTagFragment}
  ${responsiveImageFragment}
  ${ArtworksBlockFragment}
  ${PostsBlockFragment}
  ${LatestPostsBlockFragment}
  ${LatestArtworksBlockFragment}
`;

const { page, site, global } = await request<{
  page: PageRecord;
  global: GlobalRecord;
  site: Site;
}>(query, {
  variables: { slug },
});
---

<Layout seo={page._seoMetaTags} favicon={site.faviconMetaTags}>
  <Header logo={global.logo} />
  {page.blocks.map(({ __typename, ...block }) => {
    switch (__typename) {
      case "PostsBlockRecord":
        return <PostsBlock {...block} />;
      case "ArtworksBlockRecord":
        return <ArtworksBlock {...block} />;
      case "LatestPostsBlockRecord":
        return <LatestPostsBlock {...block} />;
      case "LatestArtworksBlockRecord":
        return <LatestArtworksBlock {...block} />;
      default:
        return null;
    }
  })}
</Layout>
