---
import gql from "graphql-tag";
import Artwork, { fragment as ArtworkFragment } from "../layouts/artwork.astro";
import Page, { fragment as PageFragment } from "../layouts/page.astro";
import Post, { fragment as PostFragment } from "../layouts/post.astro";
import { request } from "../lib/datocms/request";
import type {
  ArtworkRecord,
  GlobalRecord,
  PageRecord,
  PostRecord,
} from "../lib/datocms/types";

export async function getStaticPaths() {
  const {
    allPages: pages,
    global: { postsPage, artworksPage },
    allPosts: posts,
    allArtworks: artworks,
  } = await request<{
    allPages: PageRecord[];
    global: GlobalRecord;
    allPosts: PostRecord[];
    allArtworks: ArtworkRecord[];
  }>(gql`
    {
      allPages(first: 20) {
        slug
      }
      allPosts(first: 20) {
        slug
      }
      allArtworks(first: 20) {
        slug
      }
      global {
        postsPage {
          slug
        }
        artworksPage {
          slug
        }
      }
    }
  `);
  const pagePaths = pages.map((page) => ({
    params: { slug: page.slug || undefined },
  }));
  const postPaths = posts.map((post) => ({
    params: { slug: `${postsPage.slug}/${post.slug}` || undefined },
  }));
  const artworkPaths = artworks.map((artwork) => ({
    params: { slug: `${artworksPage.slug}/${artwork.slug}` || undefined },
  }));
  return [...pagePaths, ...postPaths, ...artworkPaths];
}

interface PageParams {
  slug?: string;
}

const { slug = "" } = Astro.params as PageParams;
const slugParts = slug.split("/");

const SITE_DATA_QUERY = gql`
  query SiteData {
    global {
      postsPage {
        slug
      }
      artworksPage {
        slug
      }
    }
  }
`;

const PAGE_QUERY = gql`
  query PageBySlug($slug: String) {
    page(filter: { slug: { eq: $slug } }) {
      ...Page
    }
  }

  ${PageFragment}
`;

const POST_QUERY = gql`
  query PostBySlug($slug: String) {
    post(filter: { slug: { eq: $slug } }) {
      ...Post
    }
  }

  ${PostFragment}
`;

const ARTWORK_QUERY = gql`
  query ArtworkBySlug($slug: String) {
    artwork(filter: { slug: { eq: $slug } }) {
      ...Artwork
    }
  }

  ${ArtworkFragment}
`;

const { global } = await request<{
  global: GlobalRecord;
}>(SITE_DATA_QUERY, {
  variables: { slug },
});

const isSubpageOfRoute = (route: string) => {
  return slugParts[0] === route && slugParts.length > 1;
};

const type = isSubpageOfRoute(global.postsPage.slug!)
  ? "post"
  : isSubpageOfRoute(global.artworksPage.slug!)
  ? "artwork"
  : "page";

const promise = {
  post: async () => {
    const postSlug = slugParts[1];
    const { post } = await request<{ post: PostRecord }>(POST_QUERY, {
      variables: { slug: postSlug },
    });
    return post;
  },
  artwork: async () => {
    const artworkSlug = slugParts[1];
    const { artwork } = await request<{ artwork: ArtworkRecord }>(
      ARTWORK_QUERY,
      {
        variables: { slug: artworkSlug },
      }
    );
    return artwork;
  },
  page: async () => {
    const { page } = await request<{ page: PageRecord }>(PAGE_QUERY, {
      variables: { slug },
    });
    return page;
  },
}[type];

const data = await promise();
---

<>
  {type === "post" ? (
    <Post post={data} />
  ) : type === "artwork" ? (
    <Artwork artwork={data} />
  ) : (
    <Page page={data} />
  )}
</>
