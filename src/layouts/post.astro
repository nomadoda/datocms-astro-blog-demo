---
import gql from "graphql-tag";
import { Image } from "react-datocms";
import ArticleTitle from "../components/article-title.astro";
import Blocks from "../components/blocks.astro";
import { fragment as LatestArtworksBlockFragment } from "../components/blocks/latest-artworks-block.astro";
import { fragment as LatestPostsBlockFragment } from "../components/blocks/latest-posts-block.astro";
import { Body } from "../components/body";
import { BodyWithVideo } from "../components/body-with-video";
import { CategoryBadge } from "../components/category-badge";
import { Container } from "../components/container";
import { request } from "../lib/datocms/request";
import type { GlobalRecord, PostRecord } from "../lib/datocms/types";
import {
  metaTagFragment,
  responsiveImageFragment,
  videoFragment,
} from "../lib/fragments";
import Layout from "./layout.astro";

export const fragment = gql`
  fragment Post on PostRecord {
    id
    title
    slug
    image {
      responsiveImage {
        ...ResponsiveImage
      }
    }
    category {
      ...CategoryBadge
    }
    body {
      value
      blocks {
        __typename
        id
        media {
          responsiveImage(
            imgixParams: { fit: crop, w: 800, h: 400, auto: format }
          ) {
            ...ResponsiveImage
          }
          video {
            ...Video
          }
        }
      }
    }
    _seoMetaTags {
      ...MetaTag
    }
  }

  ${metaTagFragment}
  ${responsiveImageFragment}
  ${videoFragment}
  ${CategoryBadge.fragment}
`;

const query = gql`
  query Post {
    global {
      postBlocks {
        __typename
        ... on LatestPostsBlockRecord {
          ...LatestPostsBlock
        }
        ... on LatestArtworksBlockRecord {
          ...LatestArtworksBlock
        }
      }
    }
  }
  ${LatestArtworksBlockFragment}
  ${LatestPostsBlockFragment}
`;

const {
  global: { postBlocks },
} = await request<{ global: GlobalRecord }>(query);

interface PostProps {
  post: PostRecord;
}

const { post } = Astro.props as PostProps;
const image = post.image.responsiveImage!;
const body = post.body as any;
const hasVideo = post.body.blocks.some(({ media }) => media?.video);
---

<Layout seo={post._seoMetaTags}>
  <Container>
    <article class="my-16 flex flex-col items-center">
      <ArticleTitle title={post.title} />
      <Image className="mb-8" lazyLoad={false} data={image} />
      <CategoryBadge className="mb-8" category={post.category} />
      <div class="max-w-screen-sm">
        {hasVideo ? (
          <BodyWithVideo
            client:only="react"
            body={body}
            headingLevelFrom={3}
            videoId={post.id}
            videoTitle={post.title}
          />
        ) : (
          <Body body={body} headingLevelFrom={3} />
        )}
      </div>
    </article>
  </Container>
  <Blocks blocks={postBlocks} />
</Layout>
