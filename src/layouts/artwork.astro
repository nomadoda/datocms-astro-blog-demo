---
import gql from "graphql-tag";
import { Image } from "react-datocms";
import ArticleTitle from "../components/article-title.astro";
import Blocks from "../components/blocks.astro";
import { fragment as ContentBlockFragment } from "../components/blocks/content-block.astro";
import { fragment as LatestArtworksBlockFragment } from "../components/blocks/latest-artworks-block.astro";
import { fragment as LatestPostsBlockFragment } from "../components/blocks/latest-posts-block.astro";
import { Body } from "../components/body";
import { BodyWithVideo } from "../components/body-with-video";
import { Container } from "../components/container";
import { request } from "../lib/datocms/request";
import type { ArtworkRecord, GlobalRecord } from "../lib/datocms/types";
import {
  metaTagFragment,
  responsiveImageFragment,
  videoFragment,
} from "../lib/fragments";
import Layout from "./layout.astro";

export const fragment = gql`
  fragment Artwork on ArtworkRecord {
    id
    title
    slug
    image {
      responsiveImage {
        ...ResponsiveImage
      }
    }
    body {
      value
      blocks {
        __typename
        id
        media {
          responsiveImage(
            imgixParams: { fit: crop, w: 800, h: 400, auto: format }
          ) {
            ...ResponsiveImage
          }
          video {
            ...Video
          }
        }
      }
    }
    _seoMetaTags {
      ...MetaTag
    }
  }

  ${metaTagFragment}
  ${responsiveImageFragment}
  ${videoFragment}
`;

const query = gql`
  query Artwork {
    global {
      artworkBlocks {
        __typename
        ... on LatestPostsBlockRecord {
          ...LatestPostsBlock
        }
        ... on LatestArtworksBlockRecord {
          ...LatestArtworksBlock
        }
        ... on ContentBlockRecord {
          ...ContentBlock
        }
      }
    }
  }

  ${LatestArtworksBlockFragment}
  ${LatestPostsBlockFragment}
  ${ContentBlockFragment}
`;

const {
  global: { artworkBlocks },
} = await request<{ global: GlobalRecord }>(query);

interface ArtworkProps {
  artwork: ArtworkRecord;
}

const { artwork } = Astro.props as ArtworkProps;
const image = artwork.image.responsiveImage!;
const body = artwork.body as any;
const hasVideo = artwork.body?.blocks.some(({ media }) => media?.video);
---

<Layout seo={artwork._seoMetaTags}>
  <Container>
    <article class="flex flex-col items-center">
      <ArticleTitle title={artwork.title} />
      <Image className="mb-8" lazyLoad={false} data={image} />
      {artwork.body ? (
        <div class="max-w-screen-sm">
          {hasVideo ? (
            <BodyWithVideo
              client:only="react"
              body={body}
              headingLevelFrom={3}
              videoId={artwork.id}
              videoTitle={artwork.title}
            />
          ) : (
            <Body body={body} headingLevelFrom={3} />
          )}
        </div>
      ) : null}
    </article>
  </Container>
  <Blocks blocks={artworkBlocks} />
</Layout>
